#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>


#define U_TAPPING_TERM 200

/ {
    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <200>;
    };

    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = <&zip_xy_scaler 1 2>, <&zip_temp_layer 6 600>;

        scroll {
            layers = <7>; // SCROLL
            input-processors =
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_scaler 1 14>,
                <&zip_scroll_transform (INPUT_TRANSFORM_Y_INVERT)>;
        };

        sniping {
            layers = <8>; // SNIPING 
            input-processors = <&zip_xy_scaler 1 8>, <&zip_temp_layer 8 100>;
        };
    };

    combos { compatible = "zmk,combos"; };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC         &kp Q          &kp W             &kp E        &kp R      &kp T        &kp Y           &kp U              &kp I      &kp O                   &kp P                      &kp BSPC
&kp LEFT_SHIFT  &kp A          &kp S             &kp D        &kp F      &kp G        &kp H           &kp J              &kp K      &kp L                   &kp SEMICOLON              &kp APOS
&kp LEFT_GUI    &u_mt LCTRL Z  &u_mt LEFT_ALT X  &u_lt 7 C    &u_lt 8 V  &u_lt 1 B    &kp N           &kp M              &kp COMMA  &u_mt RIGHT_ALT PERIOD  &u_mt RIGHT_CONTROL SLASH  &kp RIGHT_GUI
                                                 &u_lt 5 TAB  &kp SPACE  &mo 4        &u_lt 3 RETURN  &u_lt 2 BACKSPACE
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &studio_unlock    &trans      &trans    &trans         &trans        &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans            &kp DELETE  &kp LEFT  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &kp INS     &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &trans
                        &trans  &trans  &trans            &trans      &trans
            >;
        };

        NUM {
            bindings = <
&trans  &trans  &kp N7        &kp N8        &kp N9        &kp PLUS     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH    &trans  &trans  &trans  &trans  &trans  &trans
                              &kp PERIOD    &kp N0        &kp EQUAL    &trans  &trans
            >;
        };

        SYM {
            bindings = <
&trans  &kp TILDE  &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &kp DOLLAR     &kp PERCENT       &kp CARET             &kp MINUS                &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &kp EXCL       &kp AT            &kp HASH              &kp SLASH                &trans  &trans  &trans  &trans  &trans  &trans
                                  &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp UNDERSCORE           &trans  &trans
            >;
        };

        FUN {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(LC(LG(NUMBER_4)))  &kp LC(LA(U))     &kp LC(LA(UP_ARROW))  &kp LC(LA(I))      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LG(LS(NUMBER_4))      &kp LC(LA(LEFT))  &kp LC(LA(RET))       &kp LC(LA(RIGHT))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans                    &kp LA(LC(J))     &kp LC(LA(DOWN))      &kp LC(LA(K))      &trans  &trans
                        &trans  &trans  &trans    &trans                    &trans
            >;
        };

        MEDIA {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans                  &trans                &trans                &trans        &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_PREV              &kp C_VOL_DN          &kp K_MUTE            &kp C_VOL_UP  &kp C_NEXT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_BACKLIGHT_TOGGLE  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans        &trans      &trans
                        &trans  &trans  &trans    &kp C_STOP              &kp C_PLAY_PAUSE
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp RCLK  &mkp LCLK  &mkp MCLK    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SNIPING {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp RCLK  &mkp LCLK  &mkp MCLK    &trans  &trans
            >;
        };
    };
};
